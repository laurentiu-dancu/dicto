<?php

/**
 * @file
 * Provides enhancements for implementing and managing migrations.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\dicto_views\Constants;
use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_query_alter().
 */
function dicto_views_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() === 'term' && $view->current_display === 'term_page') {
    foreach ($query->fields as $key => &$field) {
      if ($key === 'votingapi_result_node_field_data_1_value__coa') {
        $field['field'] = '(COALESCE(votingapi_result_node_field_data_1.value, 0) - COALESCE(votingapi_result_node_field_data.value, 0))';
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function dicto_views_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'views_query_alter':
      $group = $implementations['dicto_views'];
      unset($implementations['dicto_views']);
      $implementations['dicto_views'] = $group;
      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dicto_views_views_pre_render(ViewExecutable $view) {
  if ($view->id() === 'term' && $view->current_display === 'term_page') {
    if (!isset($view->result[0])) {
      if (isset($view->args[0])) {
        $view->setTitle(str_replace('-', ' ', $view->args[0]));
      }
      return;
    }
    $title = $view->result[0]->_entity?->label();
    if ($title) {
      $view->setTitle($title);
    }
  }

  if ($view->id() === 'user_definitions') {
    $view->setTitle('$title');
    $user = \Drupal\user\Entity\User::load($view->args[0]);
    if ($user) {
      $view->setTitle($user->label() . ' - DefiniÈ›ii');
    }
  }
}

/**
 * A theme preprocess function to automatically allow view-based node
 * templates if called from a view.
 *
 * The 'modules/node.views.inc' file is a better place for this, but
 * we haven't got a chance to load that file before Drupal builds the
 * node portion of the theme registry.
 */
function dicto_views_preprocess_node(&$variables) {
  $a = 1;
}

/**
 * Implements hook_entity_presave().
 */
function dicto_views_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if (!isset($entity->field_slug)) {
    return;
  }

  $slugify = new \Cocur\Slugify\Slugify(['regexp' => Constants::SLUG_REGEX]);
  $entity->field_slug->value = $slugify->slugify($entity->label());
}

/**
 * Implements hook_update_N().
 */
function dicto_views_update_9101(&$sandbox) {
  $slugify = new \Cocur\Slugify\Slugify(['regexp' => Constants::SLUG_REGEX]);
  $nodeIdList = \Drupal::entityQuery('node')->execute();
  $nodes = Node::loadMultiple($nodeIdList);
  foreach ($nodes as $node) {
    if (isset($node->field_slug)) {
      $node->field_slug->value = $slugify->slugify($node->label());
      $node->save();
    }
  }
}
