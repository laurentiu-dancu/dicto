<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_library_info_alter().
 */
function thex_amp_library_info_alter(&$libraries, $extension) {
  // This library persists even if listed in libraries-override.
  // This code will pull it out for good.
  if ($extension == 'core' && isset($libraries['html5shiv'])) {
    unset($libraries['html5shiv']);
  }

}

/**
* Implements hook_preprocess_html().
*
* Reset toolbar classes and add sidebar toggle button to the header.
*/
function thex_amp_preprocess_html(&$variables) {
  // AMP Toolbar wrapped the toolbar in amp-sidebar, which is always
  // vertical. Change the page classes to reflect that.
  // @see toolbar.html.twig.
  if (!empty($variables['page_top']['toolbar'])) {
    if (!empty($variables['attributes']) && $variables['attributes'] instanceof Attribute) {
      $variables['attributes']->removeClass('toolbar-horizontal');
      $variables['attributes']->addClass('toolbar-vertical');
    }
    else {
      $variables['attributes'] = new Attribute($variables['attributes']);
      $variables['attributes']->addClass(['toolbar-tray-open', 'toolbar-vertical', 'toolbar-fixed', 'toolbar-loading']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function thex_amp_preprocess_form(&$variables) {
  if ($variables['attributes']['method'] !== 'get' ?? false) {
    $variables['attributes']['action-xhr'] = $variables['attributes']['action'];
    unset($variables['attributes']['action']);
  }
}

/**
 * Implements hook_form_alter().
 */
function thex_amp_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (str_contains($form['#id'], 'votingapi-reaction-form')) {
    $formName = str_replace('-', '_', $form['#id']);
    $upString = $form['type']['#options']['score_up']->__toString();
    $downString = $form['type']['#options']['score_down']->__toString();
    $up = 0;
    $down = 0;
    if (preg_match('/reaction-count\">(.*?)<\/div>/', $upString, $match) == 1) {
      $up = $match[1];
    }
    if (preg_match('/reaction-count\">(.*?)<\/div>/', $downString, $match) == 1) {
      $down = $match[1];
    }

    $json = [
      'new' => $form['#build_id'],
      'up' => $up,
      'down' => $down,
    ];
    $jsonString = json_encode($json);
    $form['#amp'] = "<amp-state id='$formName'><script type='application/json'>$jsonString</script></amp-state>";
    $onSuccessJson = "{ $formName:{'new': event.response.new,'up': event.response.up,'down': event.response.down}}";
    $form['#attributes']['on'] = "submit-success: AMP.setState($onSuccessJson)";
    $form['type']['score_up']['#attributes']['on'] = "change:{$form['#id']}.submit";
    $form['type']['score_down']['#attributes']['on'] = "change:{$form['#id']}.submit";
    $form['form_build_id']['#attributes']['[value]'] = "{$formName}['new']";
    $form['_triggering_element_name']['#type'] = 'hidden';
    $form['_triggering_element_name']['#value'] = 'type';
    $form['_drupal_ajax']['#type'] = 'hidden';
    $form['_drupal_ajax']['#value'] = '1';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function thex_amp_preprocess_input__radio(&$variables) {
  $variables = $variables;
}
